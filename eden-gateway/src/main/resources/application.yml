server:
  port: 8301

spring:
  application:
    name: Eden-Gateway
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    jedis:
      pool:
        min-idle: 8
        max-idle: 500
        max-active: 2000
        max-wait: 10000
    timeout: 5000

eureka:
  instance:
    # 向Eureka 服务端发送心跳的间隔时间，单位为秒，用于服务续约。表明当前服务没有宕机；
    lease-renewal-interval-in-seconds: 20
  client:
    # 将当前服务注册到Eureka服务端
    register-with-eureka: true
    # 从Eureka 服务端获取注册的服务信息
    fetch-registry: true
    # 新实例信息的变化到Eureka服务端的间隔时间，单位为秒
    instance-info-replication-interval-seconds: 30
    # 默认值为30秒，即每30秒去Eureka服务端上获取服务并缓存，这里指定为3秒的原因是方便开发时测试，实际可以指定为默认值即可；
    registry-fetch-interval-seconds: 3
    serviceUrl:
      # 指定Eureka服务端地址
      defaultZone: http://eden:123456@localhost:8081/register/eureka/
zuul:
  routes:
    auth:
      # 所有以/auth开头的请求都会被转发到名称为Eden-Auth的服务上
      path: /auth/**
      serviceId: Eden-Auth
      # 由于我们需要在请求头中携带令牌，所以sensitiveHeaders设置为*，表示不过滤请求头信息，即请求的请求头信息将原封不动的转发出去
      sensitiveHeaders: "*"
  # 设置为true时，表示开启重试机制
  retryable: true
  # Zuul配合Eureka后会有一套默认的配置规则，这里我们只想请求根据我们显示配置的路由规则走，所以设置为*，表示关闭所有默认路由配置规则；
  ignored-services: "*"
  ribbon:
    eager-load:
      # Zuul内部通过Ribbon按照一定的负载均衡算法来获取服务，Ribbon进行客户端负载均衡的Client并不是在服务启动的时候就初始化好的，
      # 而是在调用的时候才会去创建相应的Client，所以第一次调用的耗时不仅仅包含发送HTTP请求的时间，还包含了创建RibbonClient的时间，这样一来如果创建时间速度较慢，同时设置的超时时间又比较短的话，第一次请求很容易出现超时的情况。设置为true的时候表示开启Ribbon的饥饿加载模式，即在应用启动的时候就去获取相应的Client备用。
      enabled: true

ribbon:
  #设置请求超时时间，单位为毫秒
  ReadTimeout: 3000